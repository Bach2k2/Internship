[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "loader",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "myapp.asgi",
        "description": "myapp.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "myapp.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "myapp.settings",
        "description": "myapp.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-a#rc%64@$khu1xo#8ehy)&h0hc8_)z*q+f-3c1l%8w82#aldc#'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "myapp.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "myapp.settings",
        "description": "myapp.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-a#rc%64@$khu1xo#8ehy)&h0hc8_)z*q+f-3c1l%8w82#aldc#'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"novels.apps.NovelsConfig\",\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "myapp.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "myapp.settings",
        "description": "myapp.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"novels.apps.NovelsConfig\",\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "myapp.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "myapp.settings",
        "description": "myapp.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"novels.apps.NovelsConfig\",\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "myapp.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "myapp.settings",
        "description": "myapp.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"novels.apps.NovelsConfig\",\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\nMIDDLEWARE = [",
        "detail": "myapp.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "myapp.settings",
        "description": "myapp.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'myapp.urls'",
        "detail": "myapp.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "myapp.settings",
        "description": "myapp.settings",
        "peekOfCode": "ROOT_URLCONF = 'myapp.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "myapp.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "myapp.settings",
        "description": "myapp.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "myapp.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "myapp.settings",
        "description": "myapp.settings",
        "peekOfCode": "WSGI_APPLICATION = 'myapp.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "myapp.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "myapp.settings",
        "description": "myapp.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "myapp.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "myapp.settings",
        "description": "myapp.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "myapp.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "myapp.settings",
        "description": "myapp.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field",
        "detail": "myapp.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "myapp.settings",
        "description": "myapp.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "myapp.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "myapp.settings",
        "description": "myapp.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "myapp.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "myapp.settings",
        "description": "myapp.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "myapp.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "myapp.settings",
        "description": "myapp.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "myapp.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "myapp.settings",
        "description": "myapp.settings",
        "peekOfCode": "STATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "myapp.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "myapp.settings",
        "description": "myapp.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "myapp.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "myapp.urls",
        "description": "myapp.urls",
        "peekOfCode": "urlpatterns = [\n    path('novels/',include(\"novels.urls\")),\n    path('admin/', admin.site.urls),\n]",
        "detail": "myapp.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "myapp.wsgi",
        "description": "myapp.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "myapp.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "novels.migrations.0001_initial",
        "description": "novels.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Novel',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),",
        "detail": "novels.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "novels.migrations.0002_novel_status_novel_year",
        "description": "novels.migrations.0002_novel_status_novel_year",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('novels', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='novel',\n            name='status',\n            field=models.BooleanField(default=True),\n        ),",
        "detail": "novels.migrations.0002_novel_status_novel_year",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "novels.migrations.0003_remove_category_novel_novel_category",
        "description": "novels.migrations.0003_remove_category_novel_novel_category",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('novels', '0002_novel_status_novel_year'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='category',\n            name='novel',\n        ),\n        migrations.AddField(",
        "detail": "novels.migrations.0003_remove_category_novel_novel_category",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "novels.migrations.0004_chapter",
        "description": "novels.migrations.0004_chapter",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('novels', '0003_remove_category_novel_novel_category'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Chapter',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),",
        "detail": "novels.migrations.0004_chapter",
        "documentation": {}
    },
    {
        "label": "NovelAdmin",
        "kind": 6,
        "importPath": "novels.admin",
        "description": "novels.admin",
        "peekOfCode": "class NovelAdmin(admin.ModelAdmin):\n    fields = [\"title\", \"published_date\", \"year\", \"status\", \"category\"]\n    list_display = [\"title\", \"published_date\", \"year\", \"status\", \"category\"]\n    # def published_recently(self, obj):\n    #     return obj.was_published_recently()\n    # published_recently.boolean = True\n    # published_recently.short_description = \"Published recently?\"\n    # list_filter = (\"status\", \"category\")\n    # search_fields = (\"title\", \"category__name\")\n    # date_hierarchy = \"published_date\"",
        "detail": "novels.admin",
        "documentation": {}
    },
    {
        "label": "CategoryAdmin",
        "kind": 6,
        "importPath": "novels.admin",
        "description": "novels.admin",
        "peekOfCode": "class CategoryAdmin(admin.ModelAdmin):\n    list_display = (\"name\",)\n    search_fields = (\"name\",)\nclass ChapterAdmin(admin.ModelAdmin):\n    list_display = [\"title\", \"content\"]\n    search_fields = [\"title\", \"content\"]\nadmin.site.register(Novel,NovelAdmin)\nadmin.site.register(Category)\nadmin.site.register(Chapter,ChapterAdmin)",
        "detail": "novels.admin",
        "documentation": {}
    },
    {
        "label": "ChapterAdmin",
        "kind": 6,
        "importPath": "novels.admin",
        "description": "novels.admin",
        "peekOfCode": "class ChapterAdmin(admin.ModelAdmin):\n    list_display = [\"title\", \"content\"]\n    search_fields = [\"title\", \"content\"]\nadmin.site.register(Novel,NovelAdmin)\nadmin.site.register(Category)\nadmin.site.register(Chapter,ChapterAdmin)",
        "detail": "novels.admin",
        "documentation": {}
    },
    {
        "label": "NovelsConfig",
        "kind": 6,
        "importPath": "novels.apps",
        "description": "novels.apps",
        "peekOfCode": "class NovelsConfig(AppConfig):\n    name = 'novels'",
        "detail": "novels.apps",
        "documentation": {}
    },
    {
        "label": "NovelForm",
        "kind": 6,
        "importPath": "novels.forms",
        "description": "novels.forms",
        "peekOfCode": "class NovelForm(forms.Form):\n    title = forms.CharField(max_length=200)\n    published_date = forms.DateTimeField(label=\"Date Published\",widget=forms.DateInput(attrs={'type': 'date'})) # dung widget de tao form\n    year = forms.IntegerField(initial=0)\n    status = forms.BooleanField(initial=True)\n    # category = forms.ModelChoiceField(queryset=Category.objects.values_list('name', flat=True), empty_label=\"Select a category\")\n    category = forms.ModelChoiceField(queryset=Category.objects.all(), empty_label=\"Select a category\")",
        "detail": "novels.forms",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "novels.models",
        "description": "novels.models",
        "peekOfCode": "class Category(models.Model):\n    name = models.CharField(max_length=200)\nclass Chapter(models.Model):\n    title = models.CharField(max_length=200)\n    content =models.CharField(max_length=2000)\nclass Novel(models.Model):\n    title = models.CharField(max_length=200)\n    published_date = models.DateTimeField(\"date published\")\n    year= models.IntegerField(default=0)\n    status= models.BooleanField(default=True)",
        "detail": "novels.models",
        "documentation": {}
    },
    {
        "label": "Chapter",
        "kind": 6,
        "importPath": "novels.models",
        "description": "novels.models",
        "peekOfCode": "class Chapter(models.Model):\n    title = models.CharField(max_length=200)\n    content =models.CharField(max_length=2000)\nclass Novel(models.Model):\n    title = models.CharField(max_length=200)\n    published_date = models.DateTimeField(\"date published\")\n    year= models.IntegerField(default=0)\n    status= models.BooleanField(default=True)\n    category = models.ForeignKey(Category, on_delete=models.CASCADE,null = True, blank= True)",
        "detail": "novels.models",
        "documentation": {}
    },
    {
        "label": "Novel",
        "kind": 6,
        "importPath": "novels.models",
        "description": "novels.models",
        "peekOfCode": "class Novel(models.Model):\n    title = models.CharField(max_length=200)\n    published_date = models.DateTimeField(\"date published\")\n    year= models.IntegerField(default=0)\n    status= models.BooleanField(default=True)\n    category = models.ForeignKey(Category, on_delete=models.CASCADE,null = True, blank= True)",
        "detail": "novels.models",
        "documentation": {}
    },
    {
        "label": "CategoryModelTest",
        "kind": 6,
        "importPath": "novels.tests",
        "description": "novels.tests",
        "peekOfCode": "class CategoryModelTest(TestCase):\n    def test_create_category(self):\n        category = Category.objects.create(name=\"Adventure\")\n        self.assertEqual(category.name, \"Adventure\")\n    def test_category_name_max_length(self):\n        # Test that the name field enforces the maximum length of 200 characters\n        category = Category.objects.create(name=\"A\" * 201)  # exceeding the limit\n        self.assertLessEqual(len(category.name), 200)\n    # Add more Category model tests as needed...\nclass ChapterModelTest(TestCase):",
        "detail": "novels.tests",
        "documentation": {}
    },
    {
        "label": "ChapterModelTest",
        "kind": 6,
        "importPath": "novels.tests",
        "description": "novels.tests",
        "peekOfCode": "class ChapterModelTest(TestCase):\n    def test_create_chapter(self):\n        chapter = Chapter.objects.create(title=\"Chapter 1\", content=\"Lorem ipsum...\")\n        self.assertEqual(chapter.title, \"Chapter 1\")\n        self.assertEqual(chapter.content, \"Lorem ipsum...\")\n    # Add more Chapter model tests as needed...\nclass NovelModelTest(TestCase):\n    def setUp(self):\n        self.category = Category.objects.create(name=\"Fantasy\")\n    def test_create_novel(self):",
        "detail": "novels.tests",
        "documentation": {}
    },
    {
        "label": "NovelModelTest",
        "kind": 6,
        "importPath": "novels.tests",
        "description": "novels.tests",
        "peekOfCode": "class NovelModelTest(TestCase):\n    def setUp(self):\n        self.category = Category.objects.create(name=\"Fantasy\")\n    def test_create_novel(self):\n        novel = Novel.objects.create(\n            title=\"The Adventure Begins\",\n            published_date=timezone.now(),\n            year=2023,\n            status=True,\n            category=self.category,",
        "detail": "novels.tests",
        "documentation": {}
    },
    {
        "label": "NovelViewsTest",
        "kind": 6,
        "importPath": "novels.tests",
        "description": "novels.tests",
        "peekOfCode": "class NovelViewsTest(TestCase):\n    def setUp(self):\n        self.client = Client()\n        self.category = Category.objects.create(name=\"Fantasy\")\n    def test_novel_list_view(self):\n        response = self.client.get(reverse(\"novels:index\"))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(\n            response, \"No novels available.\"\n        )  # Assuming you have a message for an empty list",
        "detail": "novels.tests",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "novels.urls",
        "description": "novels.urls",
        "peekOfCode": "app_name = \"novels\"\nurlpatterns = [\n    path(\"\", views.index, name=\"index\"),\n    path(\"<int:novel_id>/\", views.detail, name=\"detail\"),      # ex: /novels/5/\n    path(\"create_novel\", views.create_novel, name=\"create_novel\"),\n]",
        "detail": "novels.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "novels.urls",
        "description": "novels.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", views.index, name=\"index\"),\n    path(\"<int:novel_id>/\", views.detail, name=\"detail\"),      # ex: /novels/5/\n    path(\"create_novel\", views.create_novel, name=\"create_novel\"),\n]",
        "detail": "novels.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "novels.views",
        "description": "novels.views",
        "peekOfCode": "def index(request):\n    novel_list = Novel.objects.order_by(\"-published_date\").all()\n    # output = novel\n    # return HttpResponse(novel_list);\n    context = {'novel_list': novel_list}\n    return render(request,'novels/index.html' ,context)\n    # Way 2: \n    # template = loader.get_template(\"novels/index.html\")\n    # return HttpResponse(template.render(context, request))\ndef detail(request, novel_id):",
        "detail": "novels.views",
        "documentation": {}
    },
    {
        "label": "detail",
        "kind": 2,
        "importPath": "novels.views",
        "description": "novels.views",
        "peekOfCode": "def detail(request, novel_id):\n    novel = get_object_or_404(Novel, pk=novel_id)\n    # return HttpResponse(\"You're looking at novel %s.\" % novel_id)\n    return render(request, \"novels/detail.html\", {\"novel\": novel})\ndef create_novel(request):\n    # print(\"hehe\")\n    if request.method == 'POST':\n        form = NovelForm(request.POST)\n        if form.is_valid(): \n            # Novel.objects.create(form); ",
        "detail": "novels.views",
        "documentation": {}
    },
    {
        "label": "create_novel",
        "kind": 2,
        "importPath": "novels.views",
        "description": "novels.views",
        "peekOfCode": "def create_novel(request):\n    # print(\"hehe\")\n    if request.method == 'POST':\n        form = NovelForm(request.POST)\n        if form.is_valid(): \n            # Novel.objects.create(form); \n            title = form.cleaned_data['title']\n            published_date = form.cleaned_data['published_date']\n            year = form.cleaned_data['year']\n            status = form.cleaned_data['status']",
        "detail": "novels.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myapp.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]